// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  username      String   @unique
  password      String
  phoneNumber       String
  userRole      String   @default("user")
  emailVerified Boolean  @default(false)
  walletBalance Float    @default(0)
  totalFunds    Float    @default(0)
  totalSpent    Float    @default(0)
  referrerId    Int?
  referrer      User?    @relation("ReferrerToUser", fields: [referrerId], references: [id])
  referredUsers User[]   @relation("ReferrerToUser")
  joinedAt      DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactions Transaction[]
}

model Provider {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  dataPlans    DataPlan[]
  cablePlans   CablePlan[]
  transactions Transaction[]
}

model DataPlan {
  id           Int           @id @default(autoincrement())
  dataId       Int
  network      String
  planType     String
  amount       Int
  size         String
  validity     String
  providerId   Int
  transactions Transaction[]
  provider     Provider      @relation(fields: [providerId], references: [id])
}

model CablePlan {
  id           Int           @id @default(autoincrement())
  planId     Int
  decoder     String
  name     String
  amount       Int
  providerId   Int
  transactions Transaction[]
  provider     Provider      @relation(fields: [providerId], references: [id])
}


model Transaction {
  id                Int       @id @default(autoincrement())
  userId            Int
  amount            Float
  type              String
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  providerId        Int
  dataPlanId        Int?
  cablePlanId       Int?
  ninVerificationId Int?
  bvnVerificationId Int?
  mobileNumber      String?   // For data or airtime purchase
  iucNumber         String?   // For cable plan subscription
  meterNumber       String?   // For electricity bill payment
  customerPhoneNumber String? // For various transactions
  nin                 String?
  bvn                 String?

  // Relations
  user              User      @relation(fields: [userId], references: [id])
  provider          Provider  @relation(fields: [providerId], references: [id])
  dataPlan          DataPlan? @relation(fields: [dataPlanId], references: [id])
  cablePlan         CablePlan? @relation(fields: [cablePlanId], references: [id])
  ninVerification   NINVerification? @relation(fields: [ninVerificationId], references: [id])
  bvnVerification   BVNVerification? @relation(fields: [bvnVerificationId], references: [id])
}

model NINVerification {
  id           Int           @id @default(autoincrement())
  slipLayout   String
  verifyWith   String
  price        Int
  transactions Transaction[]
}

model BVNVerification {
  id           Int           @id @default(autoincrement())
  price        Int
  detailsType  String
  transactions Transaction[]
}

model Configuration {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}